/*
 * @description - Synesthesia Symphony
 * @copyright - 2014 Shipping Soon
 * @source - https://github.com/shippingsoon/Synesthesia-Symphony/
 * @website - https://www.shippingsoon.com/synesthesia-symphony/
 * @version - v0.06
 * @license - GPLv3
 */

'use strict';

var config = require('server_settings');
var crypto = require('crypto');

/*
 * Logs error messages to stderr.
 * @return {Undefined}
 */
exports.errorHandler = function() {
	if (config.debug)
		console.error.apply(console, arguments);
};


/*
 * Encryption
 * @param {String} options.plain_text - Plain text to be encrpted
 * @param {String} options.paraphrase - The paraphrase.
 * @param {String} options.iv - The randomly generated initiation vector.
 * @param {String} options.hmac_key - The hmac key.
 * @param {String} options.hmac_algorithm - The hmac algorithm.
 * @param {String} options.algorithm - The encrption algorithm.
 * @return {Object}
 */
exports.encrypt = function(options) {
	var algorithm = options.algorithm || 'AES-256-CBC';
	var hmac_algorithm = options.hmac_algorithm || 'SHA256';
	var iv = new Buffer(options.iv || crypto.randomBytes(16), 'hex');
	var paraphrase = options.paraphrase || crypto.randomBytes(32).toString('hex');
	var key = new Buffer(crypto.createHash('SHA256').update(paraphrase).digest('hex'), 'hex');
	var hmac_key = new Buffer(options.hmac_key || crypto.randomBytes(32), 'hex');
	var encryptor = crypto.createCipheriv(algorithm, key, iv);
	var plain_text = options.plain_text;
	
	if (plain_text === undefined || plain_text === null) {
		exports.errorHandler('Plaintext cannot be empty');
		return null;
	}
	encryptor.setEncoding('hex');
	encryptor.write(plain_text);
	encryptor.end();
	var cipher_text = encryptor.read();
	var hmac = crypto.createHmac(hmac_algorithm, hmac_key);
	
	hmac.update(cipher_text);
	hmac.update(iv.toString('hex'));

	return {
		cipher_text: cipher_text,
		paraphrase: paraphrase,
		iv: iv.toString('hex'),
		hmac_key: hmac_key.toString('hex'),
		hmac_algorithm: hmac_algorithm,
		algorithm: algorithm
	};
};

/*
 * Decryption
 * @param {String} options.cipher_text - Cipher text.
 * @param {String} options.paraphrase - The paraphrase.
 * @param {String} options.iv - The initiation vector.
 * @param {String} options.hmac_key - The hmac key.
 * @param {String} options.hmac_algorithm - The hmac algorithm.
 * @param {String} options.algorithm - The encrption algorithm.
 * @return {Object}
 */
exports.decrypt = function(options) {
	var algorithm = options.algorithm || 'AES-256-CBC';
	var hmac_algorithm = options.hmac_algorithm || 'SHA256';
	var iv = new Buffer(options.iv, 'hex');
	var key = new Buffer(crypto.createHash('SHA256').update(options.paraphrase).digest('hex'), 'hex');
	var hmac_key = new Buffer(options.hmac_key, 'hex');
	var decryptor = crypto.createDecipheriv(algorithm, key, iv);
	decryptor.update(options.cipher_text, 'hex', 'utf8');
	
	try {
		var plain_text = decryptor.final('utf8');
	}
	catch (e) {
		exports.errorHandler("createDecipheriv() error: %s", e);
		return null;
	}

	return {
		plain_text: plain_text,
		iv: iv.toString('hex'),
		paraphrase: options.paraphrase,
		hmac_key: hmac_key.toString('hex'),
		hmac_algorithm: hmac_algorithm,
		algorithm: algorithm
	};
};

